// Code generated by MockGen. DO NOT EDIT.
// Source: audit-service/repository (interfaces: IAuditCollection)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	reflect "reflect"
)

// MockIAuditCollection is a mock of IAuditCollection interface
type MockIAuditCollection struct {
	ctrl     *gomock.Controller
	recorder *MockIAuditCollectionMockRecorder
}

// MockIAuditCollectionMockRecorder is the mock recorder for MockIAuditCollection
type MockIAuditCollectionMockRecorder struct {
	mock *MockIAuditCollection
}

// NewMockIAuditCollection creates a new mock instance
func NewMockIAuditCollection(ctrl *gomock.Controller) *MockIAuditCollection {
	mock := &MockIAuditCollection{ctrl: ctrl}
	mock.recorder = &MockIAuditCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAuditCollection) EXPECT() *MockIAuditCollectionMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockIAuditCollection) Find(arg0 context.Context, arg1 interface{}, arg2 ...*options.FindOptions) (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockIAuditCollectionMockRecorder) Find(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIAuditCollection)(nil).Find), varargs...)
}

// InsertOne mocks base method
func (m *MockIAuditCollection) InsertOne(arg0 context.Context, arg1 interface{}, arg2 ...*options.InsertOneOptions) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne
func (mr *MockIAuditCollectionMockRecorder) InsertOne(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockIAuditCollection)(nil).InsertOne), varargs...)
}
